# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Response Format

EVERY response must follow this exact pattern unless explicitly told otherwise:

<index>
- Read and analyze EVERY file in the codebase
- Document current state, issues, and relevant code
- No skipping or assumptions
</index>

<plan>
- Detail exact steps to take
- Consider dependencies and potential issues
- No action without complete understanding
</plan>

<approval seeking>
- Ask for confirmation before proceeding
- Present clear options if applicable
</approval seeking>

<act>
- Only after approval
- Execute planned steps precisely
</act>

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3.5-sonnet-20240620)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
venv/bin/python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.
- Don't run migrations for supabase sql in terminal, provide the script instead
- MUST read and analyze the entire codebase for every prompt unless explicitly told not to
- MUST follow the index-plan-approval-act pattern for every response
- Never make assumptions about file existence or content
- Never take action without complete codebase understanding

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- Always verify the actual state of the codebase before updating progress trackers
- Never assume component completion without checking the actual files
- Never mark tasks as complete without verifying each individual file exists and contains the required functionality

# Scratchpad

## Current Task: Portfolio Website Frontend Development (Phase 2)

### Progress Tracking

#### 2.1 Layout Components Setup (In Progress)
[ ] 2.1.1 Create basic Layout.jsx wrapper
[X] 2.1.2 Implement Navigation.jsx with basic structure
[~] 2.1.3 Add mobile menu toggle functionality (needs verification)
[ ] 2.1.4 Create Footer.jsx with basic structure
[~] 2.1.5 Add responsive styles to Navigation (needs verification)
[ ] 2.1.6 Add responsive styles to Footer

Section 2.1 In Progress: Layout Components Setup
Current focus: Completing layout components

#### 2.2 Homepage Components (Not Started)
[ ] 2.2.1 Create basic Hero.jsx structure
[ ] 2.2.2 Add hero content and styling
[ ] 2.2.3 Create FeaturedProjects.jsx structure
[ ] 2.2.4 Add sample project cards
[ ] 2.2.5 Create ContactForm.jsx with form fields
[ ] 2.2.6 Add form validation and styling

#### 2.3 Projects Components
[ ] 2.3.1 Create ProjectCard.jsx component
[ ] 2.3.2 Implement ProjectGrid.jsx layout
[ ] 2.3.3 Add sample project data
[ ] 2.3.4 Implement grid responsive design

#### 2.4 Services Components
[ ] 2.4.1 Create ServiceItem.jsx component
[ ] 2.4.2 Implement ServicesList.jsx layout
[ ] 2.4.3 Add sample service data
[ ] 2.4.4 Add responsive layout adjustments

### Current Focus: Layout Components (2.1)
Need to complete the layout components before moving to homepage components.
- Layout.jsx and Footer.jsx still need to be created
- Navigation.jsx exists but needs review for mobile menu and responsive styles

### Notes
- Using Tailwind CSS for styling
- Mobile-first approach
- Will implement basic structure first, then add animations
- Each component will be created in its respective directory under src/components
- Only Navigation.jsx exists in layout components

### Next Immediate Steps
1. Review Navigation.jsx for mobile menu and responsive functionality
2. Create Layout.jsx wrapper component
3. Create Footer.jsx component
4. Implement responsive styles for Footer
