# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again.

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Response Format

EVERY response must follow this exact pattern unless explicitly told otherwise:

<index>
- Read and analyze EVERY file in the codebase
- Document current state, issues, and relevant code
- No skipping or assumptions
</index>

<plan>
- Detail exact steps to take
- Consider dependencies and potential issues
- No action without complete understanding
</plan>

<approval seeking>
- Ask for confirmation before proceeding
- Present clear options if applicable
</approval seeking>

<act>
- Only after approval
- Execute planned steps precisely
</act>

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:

```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:

```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:

```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:

```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:

- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3.5-sonnet-20240620)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.

```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```

This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.

```
venv/bin/python ./tools/search_engine.py "your search keywords"
```

This will output the search results in the following format:

```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```

If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.
- Don't run migrations for supabase sql in terminal, provide the script instead
- MUST read and analyze the entire codebase for every prompt unless explicitly told not to
- MUST follow the index-plan-approval-act pattern for every response
- Never make assumptions about file existence or content
- Never take action without complete codebase understanding
- Keep git operations simple: check status first, use single-line commits by default, only use complex commit structures when explicitly requested

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- Always verify the actual state of the codebase before updating progress trackers
- Never assume component completion without checking the actual files
- Never mark tasks as complete without verifying each individual file exists and contains the required functionality

# Scratchpad

## Progress Tracking Reminder System

!!! IMPORTANT: After each completed step:

1. Update [X] in Progress Tracking section
2. Add completion notes with timestamp
3. Update context.md to reflect changes
4. Verify the implementation meets all requirements

## Current Task: Portfolio Website Frontend Development (Phase 2)

### Latest Updates

[2024-02-29] Added Contact Form section:

- Created ContactForm component with validation and animations
- Implemented ContactSection container with heading and description
- Added form feedback states (success/error messages)
- Integrated with Home page
- Made the form fully responsive and accessible

[2024-02-28] Added FeaturedProjects section:

- Created FeaturedProjects component with scroll animations
- Implemented ProjectCard with alternating left-right layout
- Added sample project data with descriptions
- Generated optimized webp placeholder images
- Made the layout fully responsive

[2024-02-27] Updated Hero.jsx:

- Removed background animation for later refinement
- Maintained all text and scroll animations
- Kept responsive design and typography
- Preserved parallax scrolling effects

### Progress Tracking

#### 2.1 Layout Components Setup (Completed)

[X] 2.1.1 Create basic Layout.jsx wrapper
[X] 2.1.2 Implement Navigation.jsx with basic structure
[X] 2.1.3 Add mobile menu toggle functionality
[X] 2.1.4 Create Footer.jsx with basic structure
[X] 2.1.5 Add responsive styles to Navigation
[X] 2.1.6 Add responsive styles to Footer

#### 2.2 Homepage Components (In Progress)

[X] 2.2.1 Create Hero.jsx structure with animations
✓ Initial load animation
✓ Text reveal sequence
✓ Scroll-triggered parallax
✓ Hover interactions
✓ Clean black background (temporary)
[ ] Background animation (postponed for later refinement)

[X] 2.2.2 Add hero content and styling
✓ Staggered text reveal
✓ Smooth scroll transitions
[ ] Background effects (pending)

[X] 2.2.3 Create FeaturedProjects.jsx
✓ Section heading with animations
✓ Scroll indicator
✓ Container for project cards
✓ Alternating left-right layout

[X] 2.2.4 Add project cards
✓ Project images with hover effects
✓ Categories with staggered animations
✓ Titles and descriptions
✓ Responsive layout adjustments

[X] 2.2.5 Create ContactForm.jsx
✓ Form fields with labels
✓ Client-side validation
✓ Error handling and messages
✓ Success/error states

[X] 2.2.6 Add form validation and styling
✓ Input focus animations
✓ Form submission handling
✓ Loading state
✓ Responsive design

[ ] 2.2.7 Create ServicesSection.jsx (Next Focus)
[ ] 2.2.8 Add service items and styling

### Upcoming Tasks

1. Next, we will work on:

   - Services section on the homepage
   - Services page (separate page) which will include an About Us component

2. Ensure all components are accessible from the frontend navigation

### Next Steps

1. Create ServicesSection.jsx component with:

   - Section heading with animations
   - Service cards/items
   - Descriptions and icons
   - Responsive layout

2. Implement remaining homepage sections:

   - About section with skills and experience

3. Refine existing components:
   - Add background animation to Hero
   - Optimize for performance
   - Add additional microinteractions

### ContactForm Implementation Plan (Completed)

#### Phase 1: Create Basic Structure ✓

- Created contact directory structure ✓
- Implemented form elements with labels ✓
- Added basic styling matching site theme ✓

#### Phase 2: Add Form Validation ✓

- Implemented client-side validation ✓
- Added error messages and handling ✓
- Created visual feedback for form states ✓

#### Phase 3: Add Animations ✓

- Implemented form animations ✓
- Added button hover effects ✓
- Created loading state animation ✓
- Added success/error message animations ✓

#### Phase 4: Connect to Backend (Future Task)

- Form is ready for backend integration
- Currently using simulated submission

### Animation Implementation Plan (Inspired by jackelder.design)

#### A. Global Animations Setup

[ ] A.1 Create animation utility files - fadeIn.js: Basic fade animations - slideIn.js: Slide animations for text and sections - scaleHover.js: Hover effect animations - pageTransition.js: Page transition effects

[ ] A.2 Loading Animation - Initial page load sequence - Percentage counter animation - Content reveal transitions

#### B. Scroll Animation System

[ ] B.1 Create ScrollProvider component - Implement Framer Motion useScroll - Handle scroll-triggered animations - Manage animation variants

[ ] B.2 Scroll Animation Variants - Text fade-up animations - Staggered element reveals - Parallax scrolling effects - Section transition animations

### Animation Implementation Details

#### Hero Section Animations

- Initial reveal: Fade in with slight up movement
- Text sequence: Staggered reveal with 0.2s delay between elements
- Scroll behavior: Parallax effect with 0.1 movement factor
- Hover effects: Scale 1.05 with 300ms transition

#### Project Cards Animations

- Card reveal: Fade up with 0.5s duration
- Hover: Scale 1.02 with shadow increase
- Image: Subtle zoom on hover (scale 1.1)
- Text: Fade in from bottom on hover

#### Navigation Animations

- Menu items: Hover underline effect
- Mobile menu: Slide in from right
- Scroll behavior: Hide/show based on scroll direction

#### Form Animations

- Input focus: Scale border bottom
- Button hover: Scale 1.05 with background shift
- Success/Error: Slide and fade notifications

#### 2.3 Projects Components

[ ] 2.3.1 Create ProjectCard.jsx component
[ ] 2.3.2 Implement ProjectGrid.jsx layout
[ ] 2.3.3 Add sample project data
[ ] 2.3.4 Implement grid responsive design

#### 2.4 Services Components

[ ] 2.4.1 Create ServiceItem.jsx component
[ ] 2.4.2 Implement ServicesList.jsx layout
[ ] 2.4.3 Add sample service data
[ ] 2.4.4 Add responsive layout adjustments

### Full-Width Container Implementation Checklist

#### Phase 1: Layout Component Modification

[X] 1.1. Remove max-width constraint from Layout main content
[X] 1.2. Test impact on existing sections - Modified ScrollSection to support w-screen - Added consistent max-w-7xl content spacing - Maintained section-specific content centering
[X] 1.3. Verify navigation and footer still work correctly - Restored max-w-7xl spacing in Navigation - Restored max-w-7xl spacing in Footer - Maintained full-width backgrounds

#### Phase 2: AboutIntro Normalization

[~] 2.1. Remove translateX transform - Adjusted to -9.1% to fully cover left gap - Will remove once we find better solution
[X] 2.2. Remove explicit margin/padding resets
[X] 2.3. Normalize w-screen usage
[X] 2.4. Test scroll animations still work
[X] 2.5. Verify canvas background still covers correctly

#### Phase 3: Consistent Section Pattern

[X] 3.1. Create w-screen pattern for Hero - Added w-screen to section - Updated content constraints to match global pattern
[ ] 3.2. Apply to FeaturedProjects
[ ] 3.3. Apply to Services
[ ] 3.4. Apply to Contact
[ ] 3.5. Verify all sections maintain their unique features

#### Phase 4: Testing & Verification

[ ] 4.1. Test all breakpoints
[ ] 4.2. Verify all animations
[ ] 4.3. Check sticky positioning
[ ] 4.4. Validate scroll behavior
[ ] 4.5. Final visual inspection
